name: Build Android Bundle (AAB) - Production Signed

on:
  # Activaci√≥n manual con opciones
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente de Amplify'
        required: false
        default: 'main'
        type: choice
        options:
          - main
          - test
          - develop
      version_name:
        description: 'Version Name (ej: 1.0.0)'
        required: false
        type: string
      version_code:
        description: 'Version Code (n√∫mero entero)'
        required: false
        type: string

  # Activaci√≥n autom√°tica en releases y tags
  release:
    types: [published]

  push:
    tags:
      - 'V*.*.*'
      - 'v*.*.*'
    branches:
      - main

env:
  AMPLIFY_APP_ID: d2l8hh51bqhq16
  NODE_VERSION: 20
  JAVA_VERSION: 17
  AWS_REGION: us-east-1

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: üõí Checkout code
        uses: actions/checkout@v4

      - name: üè∑Ô∏è Generate version information
        id: version
        run: |
          echo "üè∑Ô∏è Generating version information..."

          # Obtener versi√≥n desde diferentes fuentes
          if [ "${{ github.event_name }}" == "release" ]; then
            VERSION_NAME="${{ github.event.release.tag_name }}"
            VERSION_NAME=${VERSION_NAME#v}  # Remover 'v' del prefijo
            VERSION_NAME=${VERSION_NAME#V}  # Remover 'V' del prefijo
            echo "source=release" >> $GITHUB_OUTPUT
            echo "üì¶ Source: GitHub Release"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION_NAME="${{ github.ref_name }}"
            VERSION_NAME=${VERSION_NAME#v}  # Remover 'v' del prefijo
            VERSION_NAME=${VERSION_NAME#V}  # Remover 'V' del prefijo
            echo "source=tag" >> $GITHUB_OUTPUT
            echo "üì¶ Source: Git Tag"
          elif [ -n "${{ inputs.version_name }}" ]; then
            VERSION_NAME="${{ inputs.version_name }}"
            echo "source=manual" >> $GITHUB_OUTPUT
            echo "üì¶ Source: Manual Input"
          else
            # Generar versi√≥n autom√°tica basada en timestamp
            VERSION_NAME="1.0.$(date +%Y%m%d%H%M)"
            echo "source=auto" >> $GITHUB_OUTPUT
            echo "üì¶ Source: Auto-generated"
          fi

          # Generar VERSION_CODE √∫nico pero dentro del l√≠mite de Android (max: 2,147,483,647)
          if [ -n "${{ inputs.version_code }}" ]; then
            VERSION_CODE="${{ inputs.version_code }}"
            echo "üì¶ Version Code: Manual Input"
          else
            # Estrategia optimizada: usar n√∫meros m√°s significativos del timestamp
            # Divisi√≥n por 10 = nuevo c√≥digo cada 10 segundos (perfecto para CI/CD)
            TIMESTAMP=$(date +%s)
            VERSION_CODE=$(( $TIMESTAMP / 10 ))  # 9 d√≠gitos m√°s significativos
            
            # Validaci√≥n de seguridad para el futuro (a√±o 2100+)
            if [ $VERSION_CODE -gt 2147483647 ]; then
              # Fallback ultra-seguro: divisi√≥n por 100 (8 d√≠gitos)
              VERSION_CODE=$(( $TIMESTAMP / 100 ))
              echo "üì¶ Version Code: Auto-generated (fallback: $VERSION_CODE, changes every 100s)"
            else
              echo "üì¶ Version Code: Auto-generated (optimized: $VERSION_CODE, changes every 10s)"
            fi
          fi

          # Validar que no est√©n vac√≠os
          if [ -z "$VERSION_NAME" ]; then
            echo "‚ùå Error: VERSION_NAME is empty"
            VERSION_NAME="1.0.0"
            echo "üîß Using fallback version: $VERSION_NAME"
          fi

          if [ -z "$VERSION_CODE" ]; then
            echo "‚ùå Error: VERSION_CODE is empty"
            TIMESTAMP=$(date +%s)
            VERSION_CODE=$(( $TIMESTAMP / 10 ))
            if [ $VERSION_CODE -gt 2147483647 ]; then
              VERSION_CODE=$(( $TIMESTAMP / 100 ))
            fi
            echo "üîß Using fallback version code: $VERSION_CODE"
          fi

          # Outputs y variables de entorno para mayor confiabilidad
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT

          # Tambi√©n exportar como variables de entorno para pasos posteriores
          echo "BUILD_VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "BUILD_VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV

          echo "‚úÖ Final values:"
          echo "  üìõ Version Name: $VERSION_NAME"
          echo "  üî¢ Version Code: $VERSION_CODE"

      - name: üéØ Determine environment
        id: auto-env
        run: |
          if [ "${{ github.event_name }}" == "release" ] || [ "${{ github.ref }}" == "refs/heads/main" ] || [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "environment=main" >> $GITHUB_OUTPUT
            echo "üéØ Environment: main (production)"
          elif [ "${{ github.ref }}" == "refs/heads/test" ]; then
            echo "environment=test" >> $GITHUB_OUTPUT
            echo "üéØ Environment: test"
          else
            echo "environment=develop" >> $GITHUB_OUTPUT
            echo "üéØ Environment: develop"
          fi

      - name: üìÖ Generate timestamp
        id: timestamp
        run: echo "timestamp=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: ‚òï Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: üîß Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: üîß Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üì¶ Install dependencies
        run: npm ci

      - name: ‚ö° Pull Amplify backend
        run: |
          echo "üîÑ Pulling Amplify backend..."
          export AMPLIFY_CLI_DISABLE_BROWSER_AUTH=true
          npm install -g @aws-amplify/cli@latest

          AMPLIFY_ENV="${{ inputs.environment || steps.auto-env.outputs.environment }}"
          echo "üéØ Using environment: $AMPLIFY_ENV"

          AMPLIFY_JSON='{"projectName":"UVA","appId":"'$AMPLIFY_APP_ID'","envName":"'$AMPLIFY_ENV'"}'
          PROVIDERS_JSON='{"awscloudformation":{"configLevel":"project","useProfile":false,"accessKeyId":"'$AWS_ACCESS_KEY_ID'","secretAccessKey":"'$AWS_SECRET_ACCESS_KEY'","region":"'$AWS_REGION'"}}'
          FRONTEND_JSON='{"frontend":"javascript","framework":"angular","config":{"SourceDir":"src","DistributionDir":"www","BuildCommand":"npm run build","StartCommand":"ionic serve"}}'

          amplify pull --amplify "$AMPLIFY_JSON" --providers "$PROVIDERS_JSON" --frontend "$FRONTEND_JSON" --yes

          echo "‚úÖ Amplify backend configured"

      - name: üèóÔ∏è Build Ionic project
        run: |
          echo "üî® Building Ionic project..."
          npm run build --prod
          echo "‚úÖ Ionic build completed"

      - name: üì± Setup Android platform
        run: |
          echo "üîß Setting up Android platform..."
          npx cap sync android
          npx @capacitor/assets generate --android || true

          # Verificar y configurar Gradle Wrapper
          echo "üîß Verificando Gradle Wrapper..."
          cd android

          if [ ! -f "gradlew" ]; then
            echo "‚ö†Ô∏è gradlew no encontrado, generando Gradle Wrapper..."
            gradle wrapper --gradle-version 8.2.1
          fi

          chmod +x gradlew

          if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ] || [ ! -f "gradle/wrapper/gradle-wrapper.properties" ]; then
            echo "‚ö†Ô∏è Archivos del wrapper incompletos, regenerando..."
            gradle wrapper --gradle-version 8.2.1
          fi

          cd ..
          echo "‚úÖ Android platform configured"

      - name: üè∑Ô∏è Update Android version
        run: |
          echo "üè∑Ô∏è Updating Android version..."

          # Obtener valores desde variables de entorno (m√°s confiables)
          VERSION_NAME="${BUILD_VERSION_NAME}"
          VERSION_CODE="${BUILD_VERSION_CODE}"

          echo "üìã Environment Variables:"
          echo "  BUILD_VERSION_NAME: '$VERSION_NAME'"
          echo "  BUILD_VERSION_CODE: '$VERSION_CODE'"

          # Fallback a outputs si las variables de entorno est√°n vac√≠as
          if [ -z "$VERSION_NAME" ] || [ "$VERSION_NAME" = "null" ]; then
            echo "‚ö†Ô∏è Environment variable empty, trying step outputs..."
            VERSION_NAME="${{ steps.version.outputs.version_name }}"
            VERSION_CODE="${{ steps.version.outputs.version_code }}"
            echo "üìã Step Outputs:"
            echo "  version_name output: '$VERSION_NAME'"
            echo "  version_code output: '$VERSION_CODE'"
          fi

          # √öltimo fallback si ambos est√°n vac√≠os
          if [ -z "$VERSION_NAME" ] || [ "$VERSION_NAME" = "null" ]; then
            echo "‚ö†Ô∏è All sources empty, using ultimate fallback"
            if [[ "${{ github.ref }}" == refs/tags/* ]]; then
              VERSION_NAME="${{ github.ref_name }}"
              VERSION_NAME=${VERSION_NAME#v}
              VERSION_NAME=${VERSION_NAME#V}
            else
              VERSION_NAME="1.0.$(date +%Y%m%d%H%M)"
            fi
            echo "üîß Ultimate fallback VERSION_NAME: $VERSION_NAME"
          fi

          if [ -z "$VERSION_CODE" ] || [ "$VERSION_CODE" = "null" ]; then
            echo "‚ö†Ô∏è VERSION_CODE is empty or null, using fallback"
            TIMESTAMP=$(date +%s)
            VERSION_CODE=$(( $TIMESTAMP / 10 ))
            if [ $VERSION_CODE -gt 2147483647 ]; then
              VERSION_CODE=$(( $TIMESTAMP / 100 ))
            fi
            echo "üîß Fallback VERSION_CODE: $VERSION_CODE"
          fi

          # Validaci√≥n final
          echo "üìã Final values to use:"
          echo "  Version Name: '$VERSION_NAME'"
          echo "  Version Code: '$VERSION_CODE'"

          # Verificar que no est√©n vac√≠os
          if [ -z "$VERSION_NAME" ] || [ -z "$VERSION_CODE" ]; then
            echo "‚ùå Error: Values are still empty after fallback"
            exit 1
          fi

          # Mostrar contenido actual del build.gradle
          echo "üìã Current build.gradle version info:"
          grep -n "versionCode\|versionName" android/app/build.gradle || echo "No version info found"

          # Mostrar contenido COMPLETO del build.gradle para debugging
          echo "üìÑ COMPLETE build.gradle content:"
          echo "================================="
          cat android/app/build.gradle
          echo "================================="

          # Navegar al directorio correcto
          cd android/app

          # Crear backup con timestamp
          BACKUP_FILE="build.gradle.backup.$(date +%Y%m%d_%H%M%S)"
          cp build.gradle "$BACKUP_FILE"
          echo "üíæ Backup created: $BACKUP_FILE"

          # M√©todo 1: Usar sed con sintaxis m√°s compatible
          echo "üîÑ Method 1: Updating with sed..."

          # Crear archivo temporal con las actualizaciones
          sed "s/versionCode [0-9][0-9]*/versionCode $VERSION_CODE/" build.gradle > build.gradle.tmp1
          sed "s/versionName \"[^\"]*\"/versionName \"$VERSION_NAME\"/" build.gradle.tmp1 > build.gradle.tmp2

          # Verificar que los cambios se aplicaron correctamente
          if grep -q "versionCode $VERSION_CODE" build.gradle.tmp2 && grep -q "versionName \"$VERSION_NAME\"" build.gradle.tmp2; then
            mv build.gradle.tmp2 build.gradle
            rm -f build.gradle.tmp1
            echo "‚úÖ Method 1: sed successful"
          else
            echo "‚ö†Ô∏è Method 1 failed, trying Method 2..."
            rm -f build.gradle.tmp1 build.gradle.tmp2
            
            # M√©todo 2: Usar awk como fallback
            echo "üîÑ Method 2: Updating with awk..."
            awk -v new_code="$VERSION_CODE" -v new_name="$VERSION_NAME" '
            /versionCode/ { gsub(/versionCode [0-9]+/, "versionCode " new_code) }
            /versionName/ { gsub(/versionName "[^"]*"/, "versionName \"" new_name "\"") }
            { print }
            ' build.gradle > build.gradle.tmp3
            
            if grep -q "versionCode $VERSION_CODE" build.gradle.tmp3 && grep -q "versionName \"$VERSION_NAME\"" build.gradle.tmp3; then
              mv build.gradle.tmp3 build.gradle
              echo "‚úÖ Method 2: awk successful"
            else
              echo "‚ö†Ô∏è Method 2 failed, trying Method 3..."
              rm -f build.gradle.tmp3
              
              # M√©todo 3: Reescribir l√≠neas espec√≠ficas
              echo "üîÑ Method 3: Line-by-line replacement..."
              
              # Crear archivo temporal l√≠nea por l√≠nea
              while IFS= read -r line; do
                if echo "$line" | grep -q "versionCode"; then
                  echo "        versionCode $VERSION_CODE"
                elif echo "$line" | grep -q "versionName"; then
                  echo "        versionName \"$VERSION_NAME\""
                else
                  echo "$line"
                fi
              done < build.gradle > build.gradle.tmp4
              
              mv build.gradle.tmp4 build.gradle
              echo "‚úÖ Method 3: line replacement completed"
            fi
          fi

          # Verificaci√≥n final
          echo "üìã Updated version info:"
          grep -n "versionCode\|versionName" build.gradle

          # Mostrar contenido COMPLETO del build.gradle DESPU√âS de la actualizaci√≥n
          echo "üìÑ COMPLETE build.gradle content AFTER update:"
          echo "=============================================="
          cat build.gradle
          echo "=============================================="

          # Verificar que las actualizaciones fueron exitosas
          if ! grep -q "versionCode $VERSION_CODE" build.gradle; then
            echo "‚ùå Error: versionCode update verification failed"
            echo "Expected: versionCode $VERSION_CODE"
            echo "Found:"
            grep "versionCode" build.gradle || echo "No versionCode found"
            
            echo "üìÑ COMPARISON - Before vs After:"
            echo "BEFORE (backup):"
            grep -n "versionCode" "$BACKUP_FILE" || echo "No versionCode in backup"
            echo "AFTER (current):"
            grep -n "versionCode" build.gradle || echo "No versionCode in current"
            
            cp "$BACKUP_FILE" build.gradle
            exit 1
          fi

          if ! grep -q "versionName \"$VERSION_NAME\"" build.gradle; then
            echo "‚ùå Error: versionName update verification failed" 
            echo "Expected: versionName \"$VERSION_NAME\""
            echo "Found:"
            grep "versionName" build.gradle || echo "No versionName found"
            
            echo "üìÑ COMPARISON - Before vs After:"
            echo "BEFORE (backup):"
            grep -n "versionName" "$BACKUP_FILE" || echo "No versionName in backup"
            echo "AFTER (current):"
            grep -n "versionName" build.gradle || echo "No versionName in current"
            
            cp "$BACKUP_FILE" build.gradle
            exit 1
          fi

          # Verificar que el archivo no est√° corrupto
          if ! grep -q "android {" build.gradle; then
            echo "‚ùå Error: build.gradle appears corrupted"
            echo "üìÑ Full corrupted content:"
            cat build.gradle
            cp "$BACKUP_FILE" build.gradle
            exit 1
          fi

          echo "‚úÖ All verifications passed!"

          # Limpiar backups si todo est√° bien
          rm -f "$BACKUP_FILE"

          cd ../..
          echo "‚úÖ Android version updated successfully"

      - name: üîê Setup Production Signing (Existing Keystore)
        run: |
          echo "üîê Setting up production signing with existing keystore..."

          # Verificar que el keystore existe en el repositorio
          if [ ! -f "android/keys/keystore.jks" ]; then
            echo "‚ùå Error: Keystore not found at android/keys/keystore.jks"
            echo "üìÇ Contents of android/keys/:"
            ls -la android/keys/ || echo "Directory not found"
            exit 1
          fi

          echo "‚úÖ Keystore found: android/keys/keystore.jks"
          KEYSTORE_SIZE=$(du -h android/keys/keystore.jks | cut -f1)
          echo "   Size: $KEYSTORE_SIZE"

          # Verificar que los secrets de password existan
          if [ -z "${{ secrets.KEYSTORE_PASSWORD }}" ]; then
            echo "‚ùå Error: KEYSTORE_PASSWORD secret not found"
            echo "‚ÑπÔ∏è  Only password secrets are needed (keystore is in repo)"
            exit 1
          fi

          if [ -z "${{ secrets.KEY_ALIAS }}" ]; then
            echo "‚ùå Error: KEY_ALIAS secret not found"
            exit 1
          fi

          if [ -z "${{ secrets.KEY_PASSWORD }}" ]; then
            echo "‚ùå Error: KEY_PASSWORD secret not found"
            exit 1
          fi

          echo "‚úÖ All required secrets are configured"

          # Validar que el keystore es accesible
          echo "üîß Validating keystore access..."
          if ! keytool -list -keystore android/keys/keystore.jks -storepass "${{ secrets.KEYSTORE_PASSWORD }}" -alias "${{ secrets.KEY_ALIAS }}" > /dev/null 2>&1; then
            echo "‚ùå Error: Cannot access keystore with provided credentials"
            echo "‚ÑπÔ∏è  Check KEYSTORE_PASSWORD and KEY_ALIAS secrets"
            echo "üìã Available aliases in keystore:"
            keytool -list -keystore android/keys/keystore.jks -storepass "${{ secrets.KEYSTORE_PASSWORD }}" 2>/dev/null | grep "Alias name:" || echo "Cannot list aliases"
            exit 1
          fi

          echo "‚úÖ Keystore validation successful"

          # Crear signing.properties apuntando al keystore del repositorio
          cat > android/signing.properties << EOF
          storeFile=../keys/keystore.jks
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          EOF

          echo "‚úÖ signing.properties created"

          # Verificar la configuraci√≥n
          echo "üìã Signing configuration:"
          echo "  Store File: ../keys/keystore.jks"
          echo "  Key Alias: ${{ secrets.KEY_ALIAS }}"
          echo "  Store Path: $(realpath android/keys/keystore.jks)"

          echo "‚úÖ Production signing configured with repository keystore"

      - name: üî® Build Android Bundle
        run: |
          echo "üì¶ Building Android Bundle with Production Signing..."

          cd android

          # Verificar que gradlew funcione
          if ! ./gradlew --version &> /dev/null; then
            echo "‚ö†Ô∏è Gradle Wrapper no funciona, usando Gradle del sistema..."
            GRADLE_CMD="gradle"
          else
            echo "‚úÖ Usando Gradle Wrapper"
            GRADLE_CMD="./gradlew"
          fi

          # Verificar que el firmado est√© configurado
          if [ -f "signing.properties" ]; then
            echo "üîê Production signing configured - building release bundle"
            
            # Verificar que el keystore existe en la ubicaci√≥n esperada
            if [ -f "../keys/keystore.jks" ]; then
              echo "‚úÖ Keystore file found: ../keys/keystore.jks"
              KEYSTORE_SIZE=$(du -h ../keys/keystore.jks | cut -f1)
              echo "   Size: $KEYSTORE_SIZE"
            else
              echo "‚ùå Error: Keystore file not found at ../keys/keystore.jks"
              echo "üìÇ Checking alternative locations:"
              ls -la ../keys/ | grep -E "\.(keystore|jks)$" || echo "No keystore files found in keys/"
              ls -la . | grep -E "\.(keystore|jks)$" || echo "No keystore files found in app/"
              exit 1
            fi
            
            # Verificar que build.gradle tiene configuraci√≥n de firmado
            if grep -q "signingConfigs" app/build.gradle; then
              echo "‚úÖ build.gradle has signing configuration"
            else
              echo "‚ùå Error: build.gradle missing signing configuration"
              echo "üìÑ Current buildTypes section:"
              grep -A 10 "buildTypes" app/build.gradle || echo "No buildTypes found"
              exit 1
            fi
            
            # Mostrar contenido de signing.properties para debug
            echo "üìã Current signing.properties:"
            cat signing.properties | sed 's/Password=.*/Password=***/'
            
            echo "üöÄ Building release bundle for Google Play Store..."
            $GRADLE_CMD bundleRelease --no-daemon --stacktrace --info
          else
            echo "‚ùå Error: Production signing not configured"
            echo "‚ÑπÔ∏è  Cannot build bundle for Google Play Store without production signing"
            ls -la . | grep signing || echo "No signing files found"
            exit 1
          fi

          cd ..
          echo "‚úÖ Bundle build completed with production signing"

      - name: üì¶ Upload AAB Bundle
        uses: actions/upload-artifact@v4
        with:
          name: android-bundle-v${{ steps.version.outputs.version_name }}-${{ steps.timestamp.outputs.timestamp }}
          path: android/app/build/outputs/bundle/release/app-release.aab
          retention-days: 90
          if-no-files-found: error

      - name: üì¨ Send Bundle to Slack
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "üì¶ Nuevo Bundle AAB generado para UVA App",
              "attachments": [
                {
                  "color": "good",
                  "fields": [
                    {
                      "title": "Versi√≥n",
                      "value": "v${{ steps.version.outputs.version_name }} (${{ steps.version.outputs.version_code }})",
                      "short": true
                    },
                    {
                      "title": "Rama",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "${{ github.sha }}",
                      "short": true
                    },
                    {
                      "title": "Autor",
                      "value": "${{ github.actor }}",
                      "short": true
                    },
                    {
                      "title": "Ambiente",
                      "value": "${{ inputs.environment || steps.auto-env.outputs.environment }}",
                      "short": true
                    },
                    {
                      "title": "Bundle AAB",
                      "value": "‚úÖ Listo para Google Play",
                      "short": true
                    }
                  ],
                  "actions": [
                    {
                      "type": "button",
                      "text": "üì• Descargar Bundle",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    },
                    {
                      "type": "button",
                      "text": "üìã Ver Commit",
                      "url": "${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: üì¨ Send Bundle Failure to Slack
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "‚ùå Error al generar Bundle AAB para UVA App",
              "attachments": [
                {
                  "color": "danger",
                  "fields": [
                    {
                      "title": "Versi√≥n",
                      "value": "v${{ steps.version.outputs.version_name }} (${{ steps.version.outputs.version_code }})",
                      "short": true
                    },
                    {
                      "title": "Rama",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "${{ github.sha }}",
                      "short": true
                    },
                    {
                      "title": "Autor",
                      "value": "${{ github.actor }}",
                      "short": true
                    },
                    {
                      "title": "Ambiente",
                      "value": "${{ inputs.environment || steps.auto-env.outputs.environment }}",
                      "short": true
                    },
                    {
                      "title": "Error",
                      "value": "Fall√≥ la generaci√≥n del Bundle AAB",
                      "short": false
                    }
                  ],
                  "actions": [
                    {
                      "type": "button",
                      "text": "üîç Ver Logs",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: üìä Bundle Summary
        if: always()
        run: |
          echo "## üì¶ Bundle AAB Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Versi√≥n**: v${{ steps.version.outputs.version_name }} (code: ${{ steps.version.outputs.version_code }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Fuente**: ${{ steps.version.outputs.source }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Rama**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Ambiente**: ${{ inputs.environment || steps.auto-env.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tipo**: Production Release (signed)" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: ${{ steps.timestamp.outputs.timestamp }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Verificar archivos generados
          echo "### üì± Archivos Generados" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "android/app/build/outputs/bundle/release/app-release.aab" ]; then
            BUNDLE_SIZE=$(du -h android/app/build/outputs/bundle/release/app-release.aab | cut -f1)
            echo "- ‚úÖ **Production Bundle**: $BUNDLE_SIZE (firmado para Google Play Store)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå **Error**: No se gener√≥ el bundle de producci√≥n" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Estado del signing (siempre producci√≥n)
          echo "### üîê Signing Status" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Producci√≥n**: Firmado con keystore de producci√≥n" >> $GITHUB_STEP_SUMMARY
          echo "- üöÄ **Google Play**: Listo para subir a Play Store" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Informaci√≥n de Versi√≥n" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Name**: ${{ steps.version.outputs.version_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Code**: ${{ steps.version.outputs.version_code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Amplify Backend**: ${{ inputs.environment || steps.auto-env.outputs.environment }}" >> $GITHUB_STEP_SUMMARY

      - name: üîç Verify Bundle Signing
        run: |
          echo "üîç Verifying bundle signature..."

          # Verificar que el bundle se gener√≥
          if [ ! -f "android/app/build/outputs/bundle/release/app-release.aab" ]; then
            echo "‚ùå Error: Release bundle was not generated"
            echo "üìÇ Contents of bundle directory:"
            ls -la android/app/build/outputs/bundle/ || echo "Bundle directory not found"
            exit 1
          fi

          # Obtener informaci√≥n del bundle
          BUNDLE_SIZE=$(du -h android/app/build/outputs/bundle/release/app-release.aab | cut -f1)
          echo "üì¶ Bundle generated: $BUNDLE_SIZE"

          # Verificar que el bundle est√© firmado usando aapt2 (m√°s confiable que jarsigner para AAB)
          echo "üîê Checking bundle signature..."

          # Verificar estructura del bundle
          if command -v unzip >/dev/null 2>&1; then
            echo "üìã Bundle structure:"
            unzip -l android/app/build/outputs/bundle/release/app-release.aab | head -20
            
            # Verificar si contiene archivos de firma
            SIGNATURE_FILES=$(unzip -l android/app/build/outputs/bundle/release/app-release.aab | grep -E "META-INF.*\.(RSA|DSA|EC)" | wc -l)
            if [ $SIGNATURE_FILES -gt 0 ]; then
              echo "‚úÖ Bundle contains signature files ($SIGNATURE_FILES found)"
              unzip -l android/app/build/outputs/bundle/release/app-release.aab | grep "META-INF"
            else
              echo "‚ùå Warning: No signature files found in bundle"
              echo "üìã META-INF contents:"
              unzip -l android/app/build/outputs/bundle/release/app-release.aab | grep "META-INF" || echo "No META-INF found"
            fi
          fi

          # Verificar con bundletool si est√° disponible
          if command -v bundletool >/dev/null 2>&1; then
            echo "üîß Using bundletool to verify..."
            bundletool validate --bundle=android/app/build/outputs/bundle/release/app-release.aab || echo "‚ö†Ô∏è Bundletool validation failed"
          else
            echo "‚ÑπÔ∏è  bundletool not available for validation"
          fi

          echo "‚úÖ Bundle verification completed"
