name: Build Android Bundle (AAB)

on:
  # Activación manual con opciones
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente de Amplify'
        required: false
        default: 'main'
        type: choice
        options:
          - main
          - test
          - develop
      build_type:
        description: 'Tipo de build'
        required: false
        default: 'release'
        type: choice
        options:
          - release
          - debug
      version_name:
        description: 'Version Name (ej: 1.0.0)'
        required: false
        type: string
      version_code:
        description: 'Version Code (número entero)'
        required: false
        type: string

  # Activación automática en releases y tags
  release:
    types: [published]

  push:
    tags:
      - 'v*'
    branches:
      - main

env:
  AMPLIFY_APP_ID: d2l8hh51bqhq16
  NODE_VERSION: 20
  JAVA_VERSION: 17
  AWS_REGION: us-east-1

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Generate version information
        id: version
        run: |
          # Obtener versión desde diferentes fuentes
          if [ "${{ github.event_name }}" == "release" ]; then
            VERSION_NAME="${{ github.event.release.tag_name }}"
            VERSION_NAME=${VERSION_NAME#v}  # Remover 'v' del prefijo
            echo "source=release" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION_NAME="${{ github.ref_name }}"
            VERSION_NAME=${VERSION_NAME#v}  # Remover 'v' del prefijo
            echo "source=tag" >> $GITHUB_OUTPUT
          elif [ -n "${{ inputs.version_name }}" ]; then
            VERSION_NAME="${{ inputs.version_name }}"
            echo "source=manual" >> $GITHUB_OUTPUT
          else
            # Generar versión automática basada en timestamp
            VERSION_NAME="1.0.$(date +%Y%m%d%H%M)"
            echo "source=auto" >> $GITHUB_OUTPUT
          fi

          # Generar VERSION_CODE
          if [ -n "${{ inputs.version_code }}" ]; then
            VERSION_CODE="${{ inputs.version_code }}"
          else
            # Generar versionCode automático: YYYYMMDDHHMM
            VERSION_CODE=$(date +%Y%m%d%H%M)
          fi

          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT

          echo "🏷️ Version Name: $VERSION_NAME"
          echo "🔢 Version Code: $VERSION_CODE"

      - name: 🎯 Determine environment
        id: auto-env
        run: |
          if [ "${{ github.event_name }}" == "release" ] || [ "${{ github.ref }}" == "refs/heads/main" ] || [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "environment=main" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/test" ]; then
            echo "environment=test" >> $GITHUB_OUTPUT
          else
            echo "environment=develop" >> $GITHUB_OUTPUT
          fi

      - name: 📅 Generate timestamp
        id: timestamp
        run: echo "timestamp=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: 🔧 Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: 🔧 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📦 Install dependencies
        run: npm ci

      - name: ⚡ Pull Amplify backend
        run: |
          echo "🔄 Pulling Amplify backend..."
          export AMPLIFY_CLI_DISABLE_BROWSER_AUTH=true
          npm install -g @aws-amplify/cli@latest

          AMPLIFY_ENV="${{ inputs.environment || steps.auto-env.outputs.environment }}"
          echo "🎯 Using environment: $AMPLIFY_ENV"

          AMPLIFY_JSON='{"projectName":"UVA","appId":"'$AMPLIFY_APP_ID'","envName":"'$AMPLIFY_ENV'"}'
          PROVIDERS_JSON='{"awscloudformation":{"configLevel":"project","useProfile":false,"accessKeyId":"'$AWS_ACCESS_KEY_ID'","secretAccessKey":"'$AWS_SECRET_ACCESS_KEY'","region":"'$AWS_REGION'"}}'
          FRONTEND_JSON='{"frontend":"javascript","framework":"angular","config":{"SourceDir":"src","DistributionDir":"www","BuildCommand":"npm run build","StartCommand":"ionic serve"}}'

          amplify pull --amplify "$AMPLIFY_JSON" --providers "$PROVIDERS_JSON" --frontend "$FRONTEND_JSON" --yes

          echo "✅ Amplify backend configured"

      - name: 🏗️ Build Ionic project
        run: |
          echo "🔨 Building Ionic project..."
          npm run build --prod
          echo "✅ Ionic build completed"

      - name: 📱 Setup Android platform
        run: |
          echo "🔧 Setting up Android platform..."
          npx cap sync android
          npx @capacitor/assets generate --android || true

          # Verificar y configurar Gradle Wrapper
          echo "🔧 Verificando Gradle Wrapper..."
          cd android

          if [ ! -f "gradlew" ]; then
            echo "⚠️ gradlew no encontrado, generando Gradle Wrapper..."
            gradle wrapper --gradle-version 8.2.1
          fi

          chmod +x gradlew

          if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ] || [ ! -f "gradle/wrapper/gradle-wrapper.properties" ]; then
            echo "⚠️ Archivos del wrapper incompletos, regenerando..."
            gradle wrapper --gradle-version 8.2.1
          fi

          cd ..
          echo "✅ Android platform configured"

      - name: 🏷️ Update Android version
        run: |
          echo "🏷️ Updating Android version..."

          # Mostrar valores actuales
          echo "📋 Current build.gradle version info:"
          grep -n "versionCode\|versionName" android/app/build.gradle || echo "No version info found"

          echo "🔄 Updating to:"
          echo "  versionCode: ${{ steps.version.outputs.version_code }}"
          echo "  versionName: ${{ steps.version.outputs.version_name }}"

          # Actualizar build.gradle con sed más específico
          cd android/app

          # Backup del archivo original
          cp build.gradle build.gradle.backup

          # Actualizar versionCode (formato: "versionCode 8" -> "versionCode 123")
          sed -i.tmp "s/versionCode [0-9][0-9]*/versionCode ${{ steps.version.outputs.version_code }}/" build.gradle

          # Actualizar versionName (formato: "versionName \"2.1.7\"" -> "versionName \"1.0.0\"")
          sed -i.tmp "s/versionName \"[^\"]*\"/versionName \"${{ steps.version.outputs.version_name }}\"/" build.gradle

          # Limpiar archivos temporales
          rm -f build.gradle.tmp

          # Verificar cambios
          echo "📋 Updated version info:"
          grep -n "versionCode\|versionName" build.gradle

          # Verificar que no hay valores null
          if grep -q "null" build.gradle; then
            echo "❌ Error: Found null values in build.gradle"
            echo "📄 Restoring backup..."
            mv build.gradle.backup build.gradle
            exit 1
          fi

          # Limpiar backup si todo está bien
          rm -f build.gradle.backup

          cd ../..
          echo "✅ Android version updated successfully"

      - name: 🔐 Setup Release Signing (Production)
        if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
        run: |
          echo "🔐 Setting up release signing..."

          # Verificar que los secrets existan
          if [ -z "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "❌ Error: KEYSTORE_BASE64 secret not found"
            echo "ℹ️  Please configure the keystore secrets in GitHub"
            exit 1
          fi

          if [ -z "${{ secrets.KEYSTORE_PASSWORD }}" ]; then
            echo "❌ Error: KEYSTORE_PASSWORD secret not found"
            exit 1
          fi

          if [ -z "${{ secrets.KEY_ALIAS }}" ]; then
            echo "❌ Error: KEY_ALIAS secret not found"
            exit 1
          fi

          if [ -z "${{ secrets.KEY_PASSWORD }}" ]; then
            echo "❌ Error: KEY_PASSWORD secret not found"
            exit 1
          fi

          echo "✅ All signing secrets are configured"

          # Crear keystore desde base64
          echo "🔄 Creating keystore from base64..."
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/release.keystore

          # Verificar que el keystore se creó correctamente
          if [ ! -f "android/app/release.keystore" ]; then
            echo "❌ Error: Failed to create keystore file"
            exit 1
          fi

          # Verificar que el keystore es válido
          if ! keytool -list -keystore android/app/release.keystore -storepass "${{ secrets.KEYSTORE_PASSWORD }}" -alias "${{ secrets.KEY_ALIAS }}" > /dev/null 2>&1; then
            echo "❌ Error: Keystore validation failed"
            echo "ℹ️  Check your keystore secrets (password, alias, etc.)"
            exit 1
          fi

          echo "✅ Keystore validated successfully"

          # Crear signing.properties
          cat > android/signing.properties << EOF
          storeFile=release.keystore
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          EOF

          echo "✅ Release signing configured"

      - name: 🔐 Setup Debug Signing (Fallback)
        if: github.event_name != 'release' && !startsWith(github.ref, 'refs/tags/')
        run: |
          echo "🔧 Using debug signing (not a release build)"

          # Para builds que no son release, usar debug signing
          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "🔄 Production keystore available, using it for debug build too"
            echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/release.keystore
            
            cat > android/signing.properties << EOF
          storeFile=release.keystore
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          EOF
            
            echo "✅ Using production signing for debug build"
          else
            echo "ℹ️  Using default debug signing"
          fi

      - name: 🔨 Build Android Bundle
        run: |
          echo "📦 Building Android Bundle..."

          cd android

          # Verificar que gradlew funcione
          if ! ./gradlew --version &> /dev/null; then
            echo "⚠️ Gradle Wrapper no funciona, usando Gradle del sistema..."
            GRADLE_CMD="gradle"
          else
            echo "✅ Usando Gradle Wrapper"
            GRADLE_CMD="./gradlew"
          fi

          # Compilar Bundle según el tipo
          BUILD_TYPE="${{ inputs.build_type || 'release' }}"

          if [ "$BUILD_TYPE" == "release" ]; then
            echo "🚀 Building release bundle..."
            if [ -f "signing.properties" ]; then
              echo "🔐 Using production signing"
              $GRADLE_CMD bundleRelease --no-daemon --stacktrace
            else
              echo "⚠️ Using debug signing for release"
              $GRADLE_CMD bundleDebug --no-daemon --stacktrace
            fi
          else
            echo "🔨 Building debug bundle..."
            $GRADLE_CMD bundleDebug --no-daemon --stacktrace
          fi

          cd ..
          echo "✅ Bundle build completed"

      - name: 📦 Upload AAB Bundle
        uses: actions/upload-artifact@v4
        with:
          name: android-bundle-v${{ steps.version.outputs.version_name }}-${{ steps.timestamp.outputs.timestamp }}
          path: |
            android/app/build/outputs/bundle/release/app-release.aab
            android/app/build/outputs/bundle/debug/app-debug.aab
          retention-days: 90
          if-no-files-found: ignore

      - name: 📬 Send Bundle to Slack
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "📦 Nuevo Bundle AAB generado para UVA App",
              "attachments": [
                {
                  "color": "good",
                  "fields": [
                    {
                      "title": "Versión",
                      "value": "v${{ steps.version.outputs.version_name }} (${{ steps.version.outputs.version_code }})",
                      "short": true
                    },
                    {
                      "title": "Rama",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "${{ github.sha }}",
                      "short": true
                    },
                    {
                      "title": "Autor",
                      "value": "${{ github.actor }}",
                      "short": true
                    },
                    {
                      "title": "Ambiente",
                      "value": "${{ inputs.environment || steps.auto-env.outputs.environment }}",
                      "short": true
                    },
                    {
                      "title": "Bundle AAB",
                      "value": "✅ Listo para Google Play",
                      "short": true
                    }
                  ],
                  "actions": [
                    {
                      "type": "button",
                      "text": "📥 Descargar Bundle",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    },
                    {
                      "type": "button",
                      "text": "📋 Ver Commit",
                      "url": "${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📬 Send Bundle Failure to Slack
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "❌ Error al generar Bundle AAB para UVA App",
              "attachments": [
                {
                  "color": "danger",
                  "fields": [
                    {
                      "title": "Versión",
                      "value": "v${{ steps.version.outputs.version_name }} (${{ steps.version.outputs.version_code }})",
                      "short": true
                    },
                    {
                      "title": "Rama",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "${{ github.sha }}",
                      "short": true
                    },
                    {
                      "title": "Autor",
                      "value": "${{ github.actor }}",
                      "short": true
                    },
                    {
                      "title": "Ambiente",
                      "value": "${{ inputs.environment || steps.auto-env.outputs.environment }}",
                      "short": true
                    },
                    {
                      "title": "Error",
                      "value": "Falló la generación del Bundle AAB",
                      "short": false
                    }
                  ],
                  "actions": [
                    {
                      "type": "button",
                      "text": "🔍 Ver Logs",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📊 Bundle Summary
        if: always()
        run: |
          echo "## 📦 Bundle AAB Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Versión**: v${{ steps.version.outputs.version_name }} (code: ${{ steps.version.outputs.version_code }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Fuente**: ${{ steps.version.outputs.source }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Rama**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Ambiente**: ${{ inputs.environment || steps.auto-env.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tipo**: ${{ inputs.build_type || 'release' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: ${{ steps.timestamp.outputs.timestamp }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Verificar archivos generados
          echo "### 📱 Archivos Generados" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "android/app/build/outputs/bundle/release/app-release.aab" ]; then
            BUNDLE_SIZE=$(du -h android/app/build/outputs/bundle/release/app-release.aab | cut -f1)
            echo "- ✅ **Release Bundle**: $BUNDLE_SIZE" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "android/app/build/outputs/bundle/debug/app-debug.aab" ]; then
            DEBUG_SIZE=$(du -h android/app/build/outputs/bundle/debug/app-debug.aab | cut -f1)
            echo "- ✅ **Debug Bundle**: $DEBUG_SIZE" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Estado del signing
          if [ -f "android/signing.properties" ]; then
            echo "### 🔐 Signing Status" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **Producción**: Firmado con keystore de producción" >> $GITHUB_STEP_SUMMARY
            echo "- 🚀 **Google Play**: Listo para subir a Play Store" >> $GITHUB_STEP_SUMMARY
          else
            echo "### 🔐 Signing Status" >> $GITHUB_STEP_SUMMARY
            echo "- ⚠️ **Debug**: Firmado con certificado de debug" >> $GITHUB_STEP_SUMMARY
            echo "- 🧪 **Testing**: Solo para pruebas internas" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Información de Versión" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Name**: ${{ steps.version.outputs.version_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Code**: ${{ steps.version.outputs.version_code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Amplify Backend**: ${{ inputs.environment || steps.auto-env.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
