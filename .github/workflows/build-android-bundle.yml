name: Build Android Bundle (AAB)

on:
  # Activaci√≥n manual con opciones
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente de Amplify'
        required: false
        default: 'main'
        type: choice
        options:
          - main
          - test
          - develop
      build_type:
        description: 'Tipo de build'
        required: false
        default: 'release'
        type: choice
        options:
          - release
          - debug
      version_name:
        description: 'Version Name (ej: 1.0.0)'
        required: false
        type: string
      version_code:
        description: 'Version Code (n√∫mero entero)'
        required: false
        type: string

  # Activaci√≥n autom√°tica en releases y tags
  release:
    types: [published]

  push:
    tags:
      - 'v*'
    branches:
      - main

env:
  AMPLIFY_APP_ID: d2l8hh51bqhq16
  NODE_VERSION: 20
  JAVA_VERSION: 17
  AWS_REGION: us-east-1

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: üõí Checkout code
        uses: actions/checkout@v4

      - name: üè∑Ô∏è Generate version information
        id: version
        run: |
          # Obtener versi√≥n desde diferentes fuentes
          if [ "${{ github.event_name }}" == "release" ]; then
            VERSION_NAME="${{ github.event.release.tag_name }}"
            VERSION_NAME=${VERSION_NAME#v}  # Remover 'v' del prefijo
            echo "source=release" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION_NAME="${{ github.ref_name }}"
            VERSION_NAME=${VERSION_NAME#v}  # Remover 'v' del prefijo
            echo "source=tag" >> $GITHUB_OUTPUT
          elif [ -n "${{ inputs.version_name }}" ]; then
            VERSION_NAME="${{ inputs.version_name }}"
            echo "source=manual" >> $GITHUB_OUTPUT
          else
            # Generar versi√≥n autom√°tica basada en timestamp
            VERSION_NAME="1.0.$(date +%Y%m%d%H%M)"
            echo "source=auto" >> $GITHUB_OUTPUT
          fi

          # Generar VERSION_CODE
          if [ -n "${{ inputs.version_code }}" ]; then
            VERSION_CODE="${{ inputs.version_code }}"
          else
            # Generar versionCode autom√°tico: YYYYMMDDHHMM
            VERSION_CODE=$(date +%Y%m%d%H%M)
          fi

          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT

          echo "üè∑Ô∏è Version Name: $VERSION_NAME"
          echo "üî¢ Version Code: $VERSION_CODE"

      - name: üéØ Determine environment
        id: auto-env
        run: |
          if [ "${{ github.event_name }}" == "release" ] || [ "${{ github.ref }}" == "refs/heads/main" ] || [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "environment=main" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/test" ]; then
            echo "environment=test" >> $GITHUB_OUTPUT
          else
            echo "environment=develop" >> $GITHUB_OUTPUT
          fi

      - name: üìÖ Generate timestamp
        id: timestamp
        run: echo "timestamp=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: ‚òï Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: üîß Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: üîß Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üì¶ Install dependencies
        run: npm ci

      - name: ‚ö° Pull Amplify backend
        run: |
          echo "üîÑ Pulling Amplify backend..."
          export AMPLIFY_CLI_DISABLE_BROWSER_AUTH=true
          npm install -g @aws-amplify/cli@latest

          AMPLIFY_ENV="${{ inputs.environment || steps.auto-env.outputs.environment }}"
          echo "üéØ Using environment: $AMPLIFY_ENV"

          AMPLIFY_JSON='{"projectName":"UVA","appId":"'$AMPLIFY_APP_ID'","envName":"'$AMPLIFY_ENV'"}'
          PROVIDERS_JSON='{"awscloudformation":{"configLevel":"project","useProfile":false,"accessKeyId":"'$AWS_ACCESS_KEY_ID'","secretAccessKey":"'$AWS_SECRET_ACCESS_KEY'","region":"'$AWS_REGION'"}}'
          FRONTEND_JSON='{"frontend":"javascript","framework":"angular","config":{"SourceDir":"src","DistributionDir":"www","BuildCommand":"npm run build","StartCommand":"ionic serve"}}'

          amplify pull --amplify "$AMPLIFY_JSON" --providers "$PROVIDERS_JSON" --frontend "$FRONTEND_JSON" --yes

          echo "‚úÖ Amplify backend configured"

      - name: üèóÔ∏è Build Ionic project
        run: |
          echo "üî® Building Ionic project..."
          npm run build --prod
          echo "‚úÖ Ionic build completed"

      - name: üì± Setup Android platform
        run: |
          echo "üîß Setting up Android platform..."
          npx cap sync android
          npx @capacitor/assets generate --android || true

          # Verificar y configurar Gradle Wrapper
          echo "üîß Verificando Gradle Wrapper..."
          cd android

          if [ ! -f "gradlew" ]; then
            echo "‚ö†Ô∏è gradlew no encontrado, generando Gradle Wrapper..."
            gradle wrapper --gradle-version 8.2.1
          fi

          chmod +x gradlew

          if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ] || [ ! -f "gradle/wrapper/gradle-wrapper.properties" ]; then
            echo "‚ö†Ô∏è Archivos del wrapper incompletos, regenerando..."
            gradle wrapper --gradle-version 8.2.1
          fi

          cd ..
          echo "‚úÖ Android platform configured"

      - name: üè∑Ô∏è Update Android version
        run: |
          echo "üè∑Ô∏è Updating Android version..."

          # Actualizar build.gradle
          sed -i "s/versionCode [0-9]*/versionCode ${{ steps.version.outputs.version_code }}/" android/app/build.gradle
          sed -i "s/versionName \"[^\"]*\"/versionName \"${{ steps.version.outputs.version_name }}\"/" android/app/build.gradle

          # Verificar cambios
          echo "üìã Version info updated:"
          grep -n "versionCode\|versionName" android/app/build.gradle

          echo "‚úÖ Android version updated"

      - name: üîê Setup Release Signing (Production)
        if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
        run: |
          echo "üîê Setting up release signing..."

          # Crear keystore para release (solo si existe el secret)
          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/release.keystore
            
            # Crear signing.properties
            cat > android/signing.properties << EOF
          storeFile=release.keystore
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          EOF
            
            echo "‚úÖ Release signing configured"
          else
            echo "‚ö†Ô∏è No se encontraron secrets para signing. Usando debug signing."
          fi

      - name: üî® Build Android Bundle
        run: |
          echo "üì¶ Building Android Bundle..."

          cd android

          # Verificar que gradlew funcione
          if ! ./gradlew --version &> /dev/null; then
            echo "‚ö†Ô∏è Gradle Wrapper no funciona, usando Gradle del sistema..."
            GRADLE_CMD="gradle"
          else
            echo "‚úÖ Usando Gradle Wrapper"
            GRADLE_CMD="./gradlew"
          fi

          # Compilar Bundle seg√∫n el tipo
          BUILD_TYPE="${{ inputs.build_type || 'release' }}"

          if [ "$BUILD_TYPE" == "release" ]; then
            echo "üöÄ Building release bundle..."
            if [ -f "signing.properties" ]; then
              echo "üîê Using production signing"
              $GRADLE_CMD bundleRelease --no-daemon --stacktrace
            else
              echo "‚ö†Ô∏è Using debug signing for release"
              $GRADLE_CMD bundleDebug --no-daemon --stacktrace
            fi
          else
            echo "üî® Building debug bundle..."
            $GRADLE_CMD bundleDebug --no-daemon --stacktrace
          fi

          cd ..
          echo "‚úÖ Bundle build completed"

      - name: üì¶ Upload AAB Bundle
        uses: actions/upload-artifact@v4
        with:
          name: android-bundle-v${{ steps.version.outputs.version_name }}-${{ steps.timestamp.outputs.timestamp }}
          path: |
            android/app/build/outputs/bundle/release/app-release.aab
            android/app/build/outputs/bundle/debug/app-debug.aab
          retention-days: 90
          if-no-files-found: ignore
