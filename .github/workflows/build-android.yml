name: üöÄ Build Android APK

on:
  push:
    branches:
      - 'feature/**'
      - 'fix/**'
      - 'hotfix/**'
      - 'develop'
      - 'test'
      - 'main'
  pull_request:
    branches:
      - 'develop'
      - 'main'

# Variables de entorno globales
env:
  AMPLIFY_APP_ID: d2l8hh51bqhq16
  JAVA_VERSION: '17'
  NODE_VERSION: '20'
  AWS_REGION: us-east-1

jobs:
  build:
    name: üì± Build APK
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: ‚òï Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: ü§ñ Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 33
          build-tools: 33.0.0
          ndk-version: 23.1.7779620

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üì¶ Install dependencies
        run: |
          npm ci
          npm install -g @aws-amplify/cli@latest @ionic/cli @capacitor/cli

      - name: üåç Determine Amplify environment
        id: amplify-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "env_name=main" >> $GITHUB_OUTPUT
            echo "üéØ Using MAIN environment for production"
          elif [[ "${{ github.ref }}" == "refs/heads/test" ]]; then
            echo "env_name=test" >> $GITHUB_OUTPUT
            echo "üß™ Using TEST environment for testing"
          else
            echo "env_name=develop" >> $GITHUB_OUTPUT
            echo "üöß Using DEVELOP environment for development"
          fi

      - name: üîÑ Amplify Pull (Headless Mode)
        env:
          AMPLIFY_CLI_DISABLE_BROWSER_AUTH: true
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-1'
        run: |
          echo "üîß Descargando configuraci√≥n de Amplify en modo headless..."
          echo "üìç App ID: ${{ env.AMPLIFY_APP_ID }}"
          echo "üåç Environment: ${{ steps.amplify-env.outputs.env_name }}"
          echo "üìç Region: ${{ env.AWS_REGION }}"

          # Configuraci√≥n JSON para modo headless
          AMPLIFY_JSON="{\"projectName\":\"UVA\",\"appId\":\"${{ env.AMPLIFY_APP_ID }}\",\"envName\":\"${{ steps.amplify-env.outputs.env_name }}\"}"
          PROVIDERS_JSON="{\"awscloudformation\":{\"configLevel\":\"project\",\"useProfile\":false,\"accessKeyId\":\"${{ secrets.AWS_ACCESS_KEY_ID }}\",\"secretAccessKey\":\"${{ secrets.AWS_SECRET_ACCESS_KEY }}\",\"region\":\"${{ env.AWS_REGION }}\"}}"
          FRONTEND_JSON="{\"frontend\":\"javascript\",\"framework\":\"ionic\",\"config\":{\"SourceDir\":\"src\",\"DistributionDir\":\"www\",\"BuildCommand\":\"npm run build\",\"StartCommand\":\"ionic serve\"}}"

          echo "üöÄ Ejecutando amplify pull en modo headless..."
          amplify pull \
            --amplify "$AMPLIFY_JSON" \
            --providers "$PROVIDERS_JSON" \
            --frontend "$FRONTEND_JSON" \
            --yes

          echo "‚úÖ Configuraci√≥n de Amplify descargada exitosamente"

      - name: üèóÔ∏è Build web application
        run: |
          echo "üî® Building web application..."
          npm run build
          echo "‚úÖ Web build completed"

      - name: üì± Setup Android platform
        run: |
          echo "üîß Setting up Android platform..."

          # Sincronizar Capacitor
          npx cap sync android

          # Generar assets si es necesario
          npx @capacitor/assets generate --android || true

          # Verificar y configurar Gradle Wrapper
          echo "üîß Verificando Gradle Wrapper..."
          cd android

          # Verificar si existe gradlew
          if [ ! -f "gradlew" ]; then
            echo "‚ö†Ô∏è gradlew no encontrado, generando Gradle Wrapper..."
            gradle wrapper --gradle-version 8.5
          fi

          # Dar permisos de ejecuci√≥n
          chmod +x gradlew

          # Verificar si los archivos del wrapper est√°n completos
          if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ] || [ ! -f "gradle/wrapper/gradle-wrapper.properties" ]; then
            echo "‚ö†Ô∏è Archivos del wrapper incompletos, regenerando..."
            gradle wrapper --gradle-version 8.5
          fi

          cd ..

          echo "‚úÖ Android platform configured"

      - name: üî® Build Android APK
        run: |
          echo "üì± Building Android APK..."

          cd android

          # Verificar que gradlew funcione, sino usar gradle directamente
          if ! ./gradlew --version &> /dev/null; then
            echo "‚ö†Ô∏è Gradle Wrapper no funciona, usando Gradle del sistema..."
            GRADLE_CMD="gradle"
          else
            echo "‚úÖ Usando Gradle Wrapper"
            GRADLE_CMD="./gradlew"
          fi

          # Compilar APK de debug (m√°s r√°pido para CI)
          echo "üî® Compilando APK debug..."
          $GRADLE_CMD assembleDebug --no-daemon --stacktrace

          # Compilar APK de release para branches principales
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/test" ]]; then
            echo "üöÄ Building release APK for ${{ github.ref }}"
            $GRADLE_CMD assembleRelease --no-daemon --stacktrace
          fi

          cd ..

          echo "‚úÖ APK build completed"

      - name: üìÑ List generated APKs
        run: |
          echo "üìã Generated APK files:"
          find android/app/build/outputs/apk -name "*.apk" -type f | while read apk; do
            size=$(du -h "$apk" | cut -f1)
            echo "  üìÑ $apk ($size)"
          done

      - name: üè∑Ô∏è Generate artifact names
        id: extract-branch
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          BRANCH_NAME=${BRANCH_NAME//\//-}  # Reemplazar / con -
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)

          # Configurar retenci√≥n basada en la rama
          if [[ "$BRANCH_NAME" == "main" ]] || [[ "$BRANCH_NAME" == "test" ]] || [[ "$BRANCH_NAME" == "develop" ]]; then
            RETENTION_DAYS=90
          else
            RETENTION_DAYS=30
          fi

          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "retention-days=$RETENTION_DAYS" >> $GITHUB_OUTPUT

      - name: üì¶ Upload APK Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-${{ steps.extract-branch.outputs.branch }}-${{ steps.extract-branch.outputs.timestamp }}
          path: |
            android/app/build/outputs/apk/debug/app-debug.apk
            android/app/build/outputs/apk/release/app-release.apk
          retention-days: ${{ steps.extract-branch.outputs.retention-days }}
          if-no-files-found: ignore

      - name: üì¨ Send APK to Slack
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "üì± Nueva APK generada para UVA App",
              "attachments": [
                {
                  "color": "good",
                  "fields": [
                    {
                      "title": "Rama",
                      "value": "${{ steps.extract-branch.outputs.branch }}",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "${{ github.sha }}",
                      "short": true
                    },
                    {
                      "title": "Autor",
                      "value": "${{ github.actor }}",
                      "short": true
                    },
                    {
                      "title": "Ambiente",
                      "value": "${{ steps.amplify-env.outputs.env_name }}",
                      "short": true
                    },
                    {
                      "title": "APK Debug",
                      "value": "‚úÖ Generado",
                      "short": true
                    },
                    {
                      "title": "APK Release",
                      "value": "${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test') && '‚úÖ Generado' || '‚ùå Solo para main/test' }}",
                      "short": true
                    }
                  ],
                  "actions": [
                    {
                      "type": "button",
                      "text": "üì• Descargar APK",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    },
                    {
                      "type": "button",
                      "text": "üìã Ver Commit",
                      "url": "${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: üì¨ Send Failure Notification to Slack
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "‚ùå Error al generar APK para UVA App",
              "attachments": [
                {
                  "color": "danger",
                  "fields": [
                    {
                      "title": "Rama",
                      "value": "${{ steps.extract-branch.outputs.branch }}",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "${{ github.sha }}",
                      "short": true
                    },
                    {
                      "title": "Autor",
                      "value": "${{ github.actor }}",
                      "short": true
                    },
                    {
                      "title": "Error",
                      "value": "Fall√≥ la compilaci√≥n de APK",
                      "short": false
                    }
                  ],
                  "actions": [
                    {
                      "type": "button",
                      "text": "üîç Ver Logs",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: üìä Build summary
        if: always()
        run: |
          echo "## üöÄ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Amplify Environment**: ${{ steps.amplify-env.outputs.env_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Node Version**: ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Java Version**: ${{ env.JAVA_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **AWS Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì± Generated APKs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "android/app/build/outputs/apk/debug/app-debug.apk" ]; then
            DEBUG_SIZE=$(du -h android/app/build/outputs/apk/debug/app-debug.apk | cut -f1)
            echo "- ‚úÖ **Debug APK**: $DEBUG_SIZE" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "android/app/build/outputs/apk/release/app-release.apk" ]; then
            RELEASE_SIZE=$(du -h android/app/build/outputs/apk/release/app-release.apk | cut -f1)
            echo "- ‚úÖ **Release APK**: $RELEASE_SIZE" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Environment Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **App ID**: ${{ env.AMPLIFY_APP_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend**: ${{ steps.amplify-env.outputs.env_name }}" >> $GITHUB_STEP_SUMMARY

  # Job adicional para notificar el estado del build
  notify:
    name: üì¢ Notify Build Status
    runs-on: ubuntu-latest
    needs: build
    if: always()

    steps:
      - name: üì¢ Build Status
        run: |
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "‚úÖ Build completed successfully!"
            echo "üéâ APK artifacts are available for download"
          else
            echo "‚ùå Build failed!"
            echo "üîç Check the build logs for details"
            exit 1
          fi
