name: 🔍 Test Signing Secrets

on:
  workflow_dispatch:

jobs:
  test-secrets:
    runs-on: ubuntu-latest

    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 🧪 Test Keystore Access (Repository Keystore)
        run: |
          echo "🔍 Testing keystore access with repository keystore..."

          # Verificar que el keystore existe en el repositorio
          echo "📋 Checking repository keystore:"

          if [ ! -f "android/keys/keystore.jks" ]; then
            echo "❌ Repository keystore not found at android/keys/keystore.jks"
            echo "📂 Contents of android/keys/:"
            ls -la android/keys/ || echo "Directory not found"
            KEYSTORE_STATUS="❌ Missing"
          else
            KEYSTORE_SIZE=$(du -h android/keys/keystore.jks | cut -f1)
            echo "✅ Repository keystore found: android/keys/keystore.jks ($KEYSTORE_SIZE)"
            KEYSTORE_STATUS="✅ Present"
          fi

          # Verificar secrets de passwords
          echo ""
          echo "📋 Checking password secrets:"

          if [ -z "${{ secrets.KEYSTORE_PASSWORD }}" ]; then
            echo "❌ KEYSTORE_PASSWORD secret is empty or missing"
            SECRET_PASSWORD_STATUS="❌ Missing"
          else
            echo "✅ KEYSTORE_PASSWORD secret exists"
            SECRET_PASSWORD_STATUS="✅ Present"
          fi

          if [ -z "${{ secrets.KEY_ALIAS }}" ]; then
            echo "❌ KEY_ALIAS secret is empty or missing"
            SECRET_ALIAS_STATUS="❌ Missing"
          else
            echo "✅ KEY_ALIAS secret exists: '${{ secrets.KEY_ALIAS }}'"
            SECRET_ALIAS_STATUS="✅ Present"
          fi

          if [ -z "${{ secrets.KEY_PASSWORD }}" ]; then
            echo "❌ KEY_PASSWORD secret is empty or missing"
            SECRET_KEY_PASSWORD_STATUS="❌ Missing"
          else
            echo "✅ KEY_PASSWORD secret exists"
            SECRET_KEY_PASSWORD_STATUS="✅ Present"
          fi

          # Intentar crear el keystore
          echo ""
          echo "🔧 Testing keystore creation from base64..."

          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > test-keystore.keystore
            
            if [ -f "test-keystore.keystore" ]; then
              echo "✅ Keystore file created successfully"
              KEYSTORE_SIZE=$(du -h test-keystore.keystore | cut -f1)
              echo "   Size: $KEYSTORE_SIZE"
              
              # Verificar que el keystore es válido
              if [ -n "${{ secrets.KEYSTORE_PASSWORD }}" ] && [ -n "${{ secrets.KEY_ALIAS }}" ]; then
                echo ""
                echo "🔑 Testing keystore validity..."
                if keytool -list -keystore test-keystore.keystore -storepass "${{ secrets.KEYSTORE_PASSWORD }}" -alias "${{ secrets.KEY_ALIAS }}" > /dev/null 2>&1; then
                  echo "✅ Keystore is valid and accessible"
                  KEYSTORE_VALIDITY="✅ Valid"
                  
                  # Obtener información del certificado
                  echo "📋 Certificate info:"
                  keytool -list -keystore test-keystore.keystore -storepass "${{ secrets.KEYSTORE_PASSWORD }}" -alias "${{ secrets.KEY_ALIAS }}" -v | grep -E "(Alias name|Creation date|Valid)"
                else
                  echo "❌ Keystore validation failed"
                  echo "   Either password or alias is incorrect"
                  KEYSTORE_VALIDITY="❌ Invalid"
                fi
              else
                echo "⚠️ Cannot test keystore - missing password or alias"
                KEYSTORE_VALIDITY="⚠️ Untested"
              fi
            else
              echo "❌ Failed to create keystore from base64"
              echo "   Base64 content might be corrupted"
              KEYSTORE_VALIDITY="❌ Creation failed"
            fi
          else
            echo "❌ Cannot test - KEYSTORE_BASE64 is empty"
            KEYSTORE_VALIDITY="❌ No data"
          fi

          # Limpiar archivo temporal
          rm -f test-keystore.keystore

          # Resumen
          echo ""
          echo "📊 SUMMARY"
          echo "=========="
          echo "KEYSTORE_BASE64: $SECRET_KEYSTORE_STATUS"
          echo "KEYSTORE_PASSWORD: $SECRET_PASSWORD_STATUS"
          echo "KEY_ALIAS: $SECRET_ALIAS_STATUS"
          echo "KEY_PASSWORD: $SECRET_KEY_PASSWORD_STATUS"
          echo "Keystore Validity: $KEYSTORE_VALIDITY"

          # Crear signing.properties de prueba
          echo ""
          echo "📝 Testing signing.properties creation..."
          cat > test-signing.properties << EOF
          storeFile=test-keystore.keystore
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          EOF

          echo "✅ signing.properties created:"
          echo "   Store File: $(grep storeFile test-signing.properties | cut -d'=' -f2)"
          echo "   Key Alias: $(grep keyAlias test-signing.properties | cut -d'=' -f2)"

          rm -f test-signing.properties

          echo ""
          echo "🎯 RESULT: Secrets test completed"
